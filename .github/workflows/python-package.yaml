name: Python package

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version.'
        required: false
        default: '3.10'
        type: string
      requirements:
        description: 'Python dependencies to be installed through pip; if empty, use pyproject.toml through build.'
        required: false
        default: ''
        type: string
      artifact:
        description: 'Name of the package artifact.'
        required: true
        type: string
      os:
        type: string
        required: false
        default: ubuntu-latest

env:
  PKG_NAME: epi_helper
  DEB_PYTHON_INSTALL_LAYOUT: deb_system

jobs:

  build:
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Use pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build wheel twine setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # build

      - name: ðŸ”§ [build] Install dependencies for packaging and release
        if: inputs.requirements == ''
        run: python -m pip install build

      - name: ðŸ”¨ [build] Build Python package (source distribution)
        if: inputs.requirements == ''
        run: python -m build --sdist

      - name: ðŸ”¨ [build] Build Python package (binary distribution - wheel)
        if: inputs.requirements == ''
        run: python -m build --wheel

      # build (not isolated)

      - name: ðŸ”§ [build] Install dependencies for packaging and release
        if: inputs.requirements == 'no-isolation'
        run: python -m pip install build

      - name: ðŸ”¨ [build] Build Python package (source distribution)
        if: inputs.requirements == 'no-isolation'
        run: python -m build --no-isolation --sdist

      - name: ðŸ”¨ [build] Build Python package (binary distribution - wheel)
        if: inputs.requirements == 'no-isolation'
        run: python -m build --no-isolation --wheel

      # setuptools

      - name: ðŸ”§ [setuptools] Install dependencies for packaging and release
        if: inputs.requirements != '' && inputs.requirements != 'no-isolation'
        run: python -m pip install ${{ inputs.requirements }}

      - name: ðŸ”¨ [setuptools] Build Python package (source distribution)
        if: inputs.requirements != '' && inputs.requirements != 'no-isolation'
        run: python -m build --sdist

      - name: ðŸ”¨ [setuptools] Build Python package (binary distribution - wheel)
        if: inputs.requirements != '' && inputs.requirements != 'no-isolation'
        run: python -m build --wheel

      - name: Verify Packaging
        run: |
          twine check --strict dist/*

      - name: Upload artifacts
        if: startsWith(runner.os, 'ubuntu-latest')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PKG_NAME }}-${{ runner.os }}-${{ inputs.python-version }}
          path: dist/*
          if-no-files-found: error
          retention-days: 5
